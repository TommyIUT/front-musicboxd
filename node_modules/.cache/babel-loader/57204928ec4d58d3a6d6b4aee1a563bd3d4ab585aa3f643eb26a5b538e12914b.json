{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\killt\\\\Documents\\\\POLYTECH\\\\IG3\\\\S6\\\\ProjetWeb\\\\Musicboxd\\\\Musicboxd\\\\Musicboxd\\\\front-musicboxd\\\\src\\\\components\\\\connexionView.jsx\",\n  _s = $RefreshSig$();\nimport '../styles/connexionView.css';\nimport logotxtgris from '../assets/logo_txt_gris.png';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport AccountCircleSharpIcon from '@mui/icons-material/AccountCircleSharp';\nimport gotham from '../font/GothamBold.ttf';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { Link, useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ConnexionView(_ref) {\n  _s();\n  let {\n    user,\n    setUser,\n    isConnected,\n    setIsConnected\n  } = _ref;\n  const bcrypt = require('bcryptjs');\n  const history = useHistory();\n  const setAuth = boolean => {\n    setIsConnected(boolean);\n  };\n  const handleButtonClick = async e => {\n    e.preventDefault();\n    const email = document.getElementById(\"email\").value;\n    const passwd = document.getElementById(\"password\").value;\n    const password = await bcrypt.hash(passwd, 10);\n    if (!(email === '') && !(password === '')) {\n      // test si mail existe\n      const url = `http://localhost:5000/userbox/mail/${email}`;\n      const response = await fetch(url, {\n        method: \"GET\"\n      });\n      const data = await response.json();\n      if (data.length === 0) {\n        toast.error(email + \" n'existe pas\");\n      } else {\n        const body = {\n          email,\n          password\n        };\n        const response = await fetch(\"http://localhost:5000/auth/login\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(body)\n        });\n        const parseRes = await response.json();\n        if (parseRes.invalid) {\n          toast.error('Le mot de passe est incorrect');\n        } else {\n          localStorage.setItem(\"token\", parseRes.token);\n          setAuth(true);\n        }\n      }\n    } else {\n      toast.error(\"Veuillez tout remplir\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connexionView\",\n    children: /*#__PURE__*/_jsxDEV(Stack, {\n      spacing: 1,\n      direction: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: logotxtgris,\n            alt: \"Musicboxd\",\n            className: \"logo-login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 39\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 26\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"login-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"input-login\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"email\",\n            children: \"E-mail :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            id: \"email\",\n            name: \"email\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"input-login\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"password\",\n            children: \"Mot de passe :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"password\",\n            name: \"password\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"login-button\",\n          onClick: handleButtonClick,\n          children: \"SE CONNECTER\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"divider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"noaccount\",\n        children: \" Vous n'avez pas de compte ?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/register\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          href: \"/register\",\n          variant: \"contained\",\n          startIcon: /*#__PURE__*/_jsxDEV(AccountCircleSharpIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 73\n          }, this),\n          sx: {\n            '&:hover': {\n              color: 'white',\n              backgroundColor: '#1a1a1a'\n            },\n            color: 'black',\n            width: '100%',\n            backgroundColor: '#1ED75A',\n            fontFamily: gotham\n          },\n          children: \"S'INSCRIRE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n_s(ConnexionView, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});\n_c = ConnexionView;\nvar _c;\n$RefreshReg$(_c, \"ConnexionView\");","map":{"version":3,"names":["logotxtgris","Stack","Button","AccountCircleSharpIcon","gotham","ToastContainer","toast","Link","useHistory","jsxDEV","_jsxDEV","ConnexionView","_ref","_s","user","setUser","isConnected","setIsConnected","bcrypt","require","history","setAuth","boolean","handleButtonClick","e","preventDefault","email","document","getElementById","value","passwd","password","hash","url","response","fetch","method","data","json","length","error","body","headers","JSON","stringify","parseRes","invalid","localStorage","setItem","token","className","children","spacing","direction","to","href","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","class","for","type","id","name","required","onClick","variant","startIcon","sx","color","backgroundColor","width","fontFamily","_c","$RefreshReg$"],"sources":["C:/Users/killt/Documents/POLYTECH/IG3/S6/ProjetWeb/Musicboxd/Musicboxd/Musicboxd/front-musicboxd/src/components/connexionView.jsx"],"sourcesContent":["import '../styles/connexionView.css';\r\nimport logotxtgris from '../assets/logo_txt_gris.png'\r\nimport Stack from '@mui/material/Stack';\r\nimport Button from '@mui/material/Button';\r\nimport AccountCircleSharpIcon from '@mui/icons-material/AccountCircleSharp';\r\nimport gotham from '../font/GothamBold.ttf'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport {Link, useHistory} from 'react-router-dom';\r\n\r\n\r\nexport default function ConnexionView({user, setUser, isConnected, setIsConnected}) {\r\n    const bcrypt = require('bcryptjs');\r\n    const history = useHistory();\r\n\r\n    const setAuth = boolean => {\r\n        setIsConnected(boolean)\r\n    }\r\n\r\n    const handleButtonClick = async (e) => {\r\n        e.preventDefault();\r\n        const email = document.getElementById(\"email\").value;\r\n        const passwd = document.getElementById(\"password\").value;\r\n        const password = await bcrypt.hash(passwd, 10);\r\n\r\n        if (!(email==='') && !(password==='')){\r\n\r\n            // test si mail existe\r\n            const url = `http://localhost:5000/userbox/mail/${email}`;\r\n            const response = await fetch(url, {\r\n                method: \"GET\"\r\n            });\r\n            const data = await response.json();\r\n    \r\n            if (data.length===0){\r\n                toast.error(email + \" n'existe pas\");\r\n            } else {\r\n                const body = {email, password}\r\n                const response = await fetch(\"http://localhost:5000/auth/login\", {\r\n                        method: \"POST\",\r\n                        headers: {\"Content-Type\" : \"application/json\"},\r\n                        body: JSON.stringify(body)\r\n                    })\r\n                const parseRes = await response.json()\r\n                if (parseRes.invalid) {\r\n                    toast.error('Le mot de passe est incorrect');\r\n                } else {\r\n                    localStorage.setItem(\"token\",parseRes.token)\r\n                    setAuth(true)\r\n\r\n                }\r\n\r\n            }\r\n\r\n        } else {\r\n            toast.error(\"Veuillez tout remplir\");\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className='connexionView'>\r\n            <Stack spacing={1} direction=\"column\">\r\n            <Link to=\"/\"><a href='/' ><img src={logotxtgris} alt=\"Musicboxd\" className='logo-login'/></a></Link>\r\n            <form className='login-form'>\r\n                <div class=\"input-login\">\r\n                    <label for=\"email\">E-mail :</label>\r\n                    <input type=\"email\" id=\"email\" name=\"email\" required></input>\r\n                </div>\r\n                <div class=\"input-login\">\r\n                    <label for=\"password\">Mot de passe :</label>\r\n                    <input type=\"password\" id=\"password\" name=\"password\" required></input>\r\n                </div>\r\n                <button type=\"submit\" className='login-button' onClick={handleButtonClick}>SE CONNECTER</button>\r\n            </form>\r\n                <ToastContainer />\r\n\r\n                <div class=\"divider\"></div>\r\n                <p className='noaccount'> Vous n'avez pas de compte ?</p>\r\n                <Link to=\"/register\">\r\n                <Button href=\"/register\" variant=\"contained\" startIcon={<AccountCircleSharpIcon />} sx={{ '&:hover': {\r\n                    color: 'white',\r\n                    backgroundColor: '#1a1a1a',\r\n                }, color: 'black', width:'100%', backgroundColor: '#1ED75A', fontFamily: gotham}}>\r\n                S'INSCRIRE\r\n                </Button></Link>\r\n\r\n            </Stack>\r\n\r\n            \r\n        </div>\r\n    \r\n    );\r\n  }\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}